#!groovy
node {

    def err = null
    def result
    currentBuild.result = "SUCCESS"

    try {
       stage 'Checkout'
            checkout scm
            sh 'chmod +x int-bss-gkeeper/*.sh'

       stage 'Deploy'
            echo 'Push to int-server'			
			sh 'int-bss-gkeeper/deployment.sh'

       stage 'Test1: Service Instantiation'
            echo 'Service Instantiation Test'
            result = sh 'int-bss-gkeeper/service_instantiation_test.sh'
            echo 'result: ${result}'
            if (result != 0) {
                echo '[FAILURE] Failed to build'
                currentBuild.result = 'FAILURE'
                return
            } 

       stage 'Test2: Licence Request'
            echo 'Licence Request Test'
            result = sh 'int-bss-gkeeper/licence_test.sh'
            echo 'result: ${result}'
            if (result != 0) {
                echo '[FAILURE] Failed to build'
                currentBuild.result = 'FAILURE'
                return
            }
			
	   stage 'Showing report'
			echo 'Showing report'
			publishHTML(target: [allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'int-bss-gkeeper/reports', reportFiles: '*.html', reportName: 'HTML Report'])

       stage 'Notifications'
            echo 'Sending mails'

            mail body: 'project build successful',
                        from: 'sonata-nfv@gmail.com',
                        replyTo: 'sonata-nfv@gmail.com',
                        subject: 'project build successful',
                        to: 'srodriguez@optaresolutions.com'
        }


    catch (caughtError) {
        err = caughtError
        currentBuild.result = "FAILURE"
            mail body: "project build error: ${err}" ,
            from: 'sonata-nfv@gmail.com',
            replyTo: 'sonata-nfv@gmail.com',
            subject: 'project build error',
            to: 'srodriguez@optaresolutions.com'
        }

    finally {
        /* Must re-throw exception to propagate error */
        if (err) {
            throw err
        }

    }

}
